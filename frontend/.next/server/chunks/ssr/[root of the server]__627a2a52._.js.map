{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://D%3A/NFT%20Guard%20Web%20Project/nfts-guard/frontend/src/context/ScanContext.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useState } from \"react\";\n\nexport interface Result {\n  id: string;\n  name: string;\n  tokenId: string;\n  contract: string;\n  image?: string;\n  currentPrice: number;\n  lastSale: number;\n  collectionFloor: number;\n  rarityRank: number;\n  totalSupply: number;\n  safetyScore: number;\n}\n\ninterface ScanContextType {\n  results: Result[];\n  isLoading: boolean;\n  error: string | null;\n  scanNFT: (input: string) => Promise<void>;\n  clearResults: () => void;\n}\n\nconst ScanContext = createContext<ScanContextType | undefined>(undefined);\n\nexport const ScanProvider = ({ children }: { children: React.ReactNode }) => {\n  const [results, setResults] = useState<Result[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Mock NFT scan function\n  const scanNFT = async (input: string) => {\n    setIsLoading(true);\n    setError(null);\n\n    // Simulē skenēšanu (mock API)\n    setTimeout(() => {\n      if (input.trim()) {\n        setResults([\n          {\n            id: \"1\",\n            name: \"CryptoPunk\",\n            tokenId: \"1234\",\n            contract: input,\n            image: \"/images/CryptoPunks.webp\",\n            currentPrice: 100,\n            lastSale: 90,\n            collectionFloor: 80,\n            rarityRank: 1,\n            totalSupply: 10000,\n            safetyScore: 95,\n          },\n        ]);\n      } else {\n        setError(\"Invalid contract address or token ID.\");\n      }\n      setIsLoading(false);\n    }, 1500);\n  };\n\n  const clearResults = () => {\n    setResults([]);\n    setError(null);\n  };\n\n  return (\n    <ScanContext.Provider\n      value={{ results, isLoading, error, scanNFT, clearResults }}\n    >\n      {children}\n    </ScanContext.Provider>\n  );\n};\n\nexport const useScan = () => {\n  const context = useContext(ScanContext);\n  if (!context) {\n    throw new Error(\"useScan must be used within a ScanProvider\");\n  }\n  return context;\n};\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AA0BA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,eAAe,CAAC,EAAE,QAAQ,EAAiC;IACtE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IACnD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,yBAAyB;IACzB,MAAM,UAAU,OAAO;QACrB,aAAa;QACb,SAAS;QAET,8BAA8B;QAC9B,WAAW;YACT,IAAI,MAAM,IAAI,IAAI;gBAChB,WAAW;oBACT;wBACE,IAAI;wBACJ,MAAM;wBACN,SAAS;wBACT,UAAU;wBACV,OAAO;wBACP,cAAc;wBACd,UAAU;wBACV,iBAAiB;wBACjB,YAAY;wBACZ,aAAa;wBACb,aAAa;oBACf;iBACD;YACH,OAAO;gBACL,SAAS;YACX;YACA,aAAa;QACf,GAAG;IACL;IAEA,MAAM,eAAe;QACnB,WAAW,EAAE;QACb,SAAS;IACX;IAEA,qBACE,8OAAC,YAAY,QAAQ;QACnB,OAAO;YAAE;YAAS;YAAW;YAAO;YAAS;QAAa;kBAEzD;;;;;;AAGP;AAEO,MAAM,UAAU;IACrB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}