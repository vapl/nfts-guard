{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/NFT%20Guard%20Web%20Project/nfts-guard/frontend/src/context/TranslationContext.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { createContext, useContext, ReactNode } from \"react\";\r\nimport { Locale } from \"@/utils/getTranslations\"; // Izmantojam importēto Translation\r\n\r\ntype DeepTranslation = {\r\n  [key: string]: string | DeepTranslation;\r\n};\r\n\r\n// Konteksta tips\r\ntype TranslationContextType = {\r\n  locale: Locale;\r\n  messages: DeepTranslation;\r\n};\r\n\r\nconst TranslationContext = createContext<TranslationContextType | undefined>(\r\n  undefined\r\n);\r\n\r\nexport function TranslationProvider({\r\n  children,\r\n  locale,\r\n  messages,\r\n}: {\r\n  children: ReactNode;\r\n  locale: Locale;\r\n  messages: DeepTranslation;\r\n}) {\r\n  return (\r\n    <TranslationContext.Provider value={{ locale, messages }}>\r\n      {children}\r\n    </TranslationContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTranslations() {\r\n  const context = useContext(TranslationContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      \"useTranslations must be used within a TranslationProvider\"\r\n    );\r\n  }\r\n  const { messages, locale } = context;\r\n\r\n  const t = (key: string): string => {\r\n    return key\r\n      .split(\".\")\r\n      .reduce((obj: DeepTranslation | string, part: string) => {\r\n        if (typeof obj === \"string\" || !obj) return key;\r\n        return obj[part] || key;\r\n      }, messages) as string;\r\n  };\r\n\r\n  return { t, locale };\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;;;AAFA;;AAeA,MAAM,mCAAqB,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EACrC;AAGK,SAAS,oBAAoB,EAClC,QAAQ,EACR,MAAM,EACN,QAAQ,EAKT;IACC,qBACE,6LAAC,mBAAmB,QAAQ;QAAC,OAAO;YAAE;YAAQ;QAAS;kBACpD;;;;;;AAGP;KAdgB;AAgBT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MACR;IAEJ;IACA,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG;IAE7B,MAAM,IAAI,CAAC;QACT,OAAO,IACJ,KAAK,CAAC,KACN,MAAM,CAAC,CAAC,KAA+B;YACtC,IAAI,OAAO,QAAQ,YAAY,CAAC,KAAK,OAAO;YAC5C,OAAO,GAAG,CAAC,KAAK,IAAI;QACtB,GAAG;IACP;IAEA,OAAO;QAAE;QAAG;IAAO;AACrB;GAnBgB","debugId":null}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file://D%3A/NFT%20Guard%20Web%20Project/nfts-guard/frontend/src/utils/getTranslations.ts"],"sourcesContent":["import en from \"@/locales/en.json\";\r\nimport es from \"@/locales/es.json\";\r\n\r\nexport const locales = [\"en\", \"es\"] as const;\r\nexport type Locale = (typeof locales)[number];\r\n\r\nexport type Translation = typeof en;\r\n\r\nconst translations: Record<Locale, Translation> = {\r\n  en,\r\n  es,\r\n};\r\n\r\nexport function getTranslations(locale: Locale): typeof en {\r\n  const messages = translations[locale];\r\n  if (!messages) {\r\n    throw new Error(`Translations for locale '${locale}' not found.`);\r\n  }\r\n  return messages;\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,UAAU;IAAC;IAAM;CAAK;AAKnC,MAAM,eAA4C;IAChD,IAAA,4FAAA,CAAA,UAAE;IACF,IAAA,4FAAA,CAAA,UAAE;AACJ;AAEO,SAAS,gBAAgB,MAAc;IAC5C,MAAM,WAAW,YAAY,CAAC,OAAO;IACrC,IAAI,CAAC,UAAU;QACb,MAAM,IAAI,MAAM,CAAC,yBAAyB,EAAE,OAAO,YAAY,CAAC;IAClE;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file://D%3A/NFT%20Guard%20Web%20Project/nfts-guard/frontend/src/components/TranslationWrapper.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { TranslationProvider } from \"@/context/TranslationContext\";\r\nimport { ReactNode } from \"react\";\r\nimport { getTranslations, Locale, locales } from \"@/utils/getTranslations\";\r\nimport { useParams } from \"next/navigation\";\r\n\r\nexport default function TranslationWrapper({\r\n  children,\r\n}: {\r\n  children: ReactNode;\r\n}) {\r\n  const params = useParams<{ locale?: string }>(); // Pieņemam, ka locale var būt undefined\r\n  const locale = params?.locale as Locale | undefined;\r\n\r\n  if (!locale || !locales.includes(locale)) {\r\n    throw new Error(\"Invalid locale\");\r\n  }\r\n\r\n  const messages = getTranslations(locale);\r\n\r\n  return (\r\n    <TranslationProvider locale={locale} messages={messages}>\r\n      {children}\r\n    </TranslationProvider>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AAEA;AACA;;;AALA;;;;AAOe,SAAS,mBAAmB,EACzC,QAAQ,EAGT;;IACC,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD,KAA0B,wCAAwC;IACzF,MAAM,SAAS,QAAQ;IAEvB,IAAI,CAAC,UAAU,CAAC,kIAAA,CAAA,UAAO,CAAC,QAAQ,CAAC,SAAS;QACxC,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD,EAAE;IAEjC,qBACE,6LAAC,wIAAA,CAAA,sBAAmB;QAAC,QAAQ;QAAQ,UAAU;kBAC5C;;;;;;AAGP;GAnBwB;;QAKP,qIAAA,CAAA,YAAS;;;KALF","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file://D%3A/NFT%20Guard%20Web%20Project/nfts-guard/frontend/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}